package com.codingDojo.ProjectManager.services;

import java.util.List;
import java.util.Optional;

import org.mindrot.jbcrypt.BCrypt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.validation.BindingResult;

import com.codingDojo.ProjectManager.models.LoginUser;
import com.codingDojo.ProjectManager.models.Project;
import com.codingDojo.ProjectManager.models.User;
import com.codingDojo.ProjectManager.repositories.ProjectRepository;
import com.codingDojo.ProjectManager.repositories.UserRepository;

@Service
public class UserProjServices {
	@Autowired
    private UserRepository userRepo;
    private ProjectRepository projectRepository;
    
    public UserProjServices(UserRepository userRepo , ProjectRepository bookRepository ) {
	     this.userRepo = userRepo;
	     this.projectRepository = projectRepository;
	 }
   
   public User register(User newUser, BindingResult result) {
       if(userRepo.findByEmail(newUser.getEmail()).isPresent()) {
           result.rejectValue("email", "Unique", "This email is already in use!");
       }
       if(!newUser.getPassword().equals(newUser.getConfirm())) {
           result.rejectValue("confirm", "Matches", "The Confirm Password must match Password!");
       }
       if(result.hasErrors()) {
           return null;
       } else {
           String hashed = BCrypt.hashpw(newUser.getPassword(), BCrypt.gensalt());
           newUser.setPassword(hashed);
           return userRepo.save(newUser);
       }
   }
   
   public User login(LoginUser newLogin, BindingResult result) {
       if(result.hasErrors()) {
           return null;
       }
       Optional<User> potentialUser = userRepo.findByEmail(newLogin.getEmail());
       if(!potentialUser.isPresent()) {
           result.rejectValue("email", "Unique", "Invalid Password or Email !");
           return null;
       }
       User user = potentialUser.get();
       if(!BCrypt.checkpw(newLogin.getPassword(), user.getPassword())) {
           result.rejectValue("password", "Matches", "Invalid Password or Email !");
       }
       if(result.hasErrors()) {
           return null;
       } else {
           return user;
       }
   }
   public User findUserById(Long id) {
       Optional<User> u = userRepo.findById(id);

       if(u.isPresent()) {
           return u.get();
           } else {
           return null;
       }
   }
	 public List<Project> allProjects() {
	     return projectRepository.findAll();
	 }
	 public Project createProject(Project b) {
	     return projectRepository.save(b);
	 }
	 public User updateUser(User b) {
	     return userRepo.save(b) ;
	 }
	 public Project updateProject(Project b) {
	     return projectRepository.save(b) ;
	 }
	 public Project findProject(Long id) {
	     Optional<Project> optionaPro = projectRepository.findById(id);
	     if(optionaPro.isPresent()) {
	         return optionaPro.get();
	     } else {
	         return null;
	     }
	 }
	 public void deleteProject (Long id) {
		 projectRepository.deleteById(id);
	 }
    
    
    
    
}
